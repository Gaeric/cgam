#+title: cgam
#+startup: content
#+author: Gaeric
#+HTML_HEAD: <link href="./worg.css" rel="stylesheet" type="text/css">
#+HTML_HEAD: <link href="/static/css/worg.css" rel="stylesheet" type="text/css">
#+OPTIONS: ^:{}
* cgam
  computer graphics and more
** rtow
   book链接: https://raytracing.github.io/books/RayTracingInOneWeekend.html

   使用cpp与rust分别实现rtow

   index:
   2  Output an Image
   2.1  The PPM Image Format
   2.2  Creating an Image File
   2.3  Adding a Progress Indicator
   3  The vec3 Class
   3.1  Color Utility Functions
   4  Rays, a Simple Camera, and Background
   4.1  The ray Class
   4.2  Sending Rays Into the Scene
   5  Adding a Sphere
   5.1  Ray-Sphere Intersection
   5.2  Creating Our First Raytraced Image
   6  Surface Normals and Multiple Objects
   6.1  Shading with Surface Normals
   6.2  Simplifying the Ray-Sphere Intersection Code
   6.3  An Abstraction for Hittable Objects
   6.4  Front Faces Versus Back Faces
   6.5  A List of Hittable Objects
   6.6  Some New C++ Features
   6.7  Common Constants and Utility Functions
   6.8  An Interval Class
   7  Moving Camera Code Into Its Own Class
   8  Antialiasing
   8.1  Some Random Number Utilities
   8.2  Generating Pixels with Multiple Samples
   9  Diffuse Materials
   9.1  A Simple Diffuse Material
   9.2  Limiting the Number of Child Rays
   9.3  Fixing Shadow Acne
   9.4  True Lambertian Reflection
   9.5  Using Gamma Correction for Accurate Color Intensity
   10  Metal
   10.1  An Abstract Class for Materials
   10.2  A Data Structure to Describe Ray-Object Intersections
   10.3  Modeling Light Scatter and Reflectance
   10.4  Mirrored Light Reflection
   10.5  A Scene with Metal Spheres
   10.6  Fuzzy Reflection
   11  Dielectrics
   11.1  Refraction
   11.2  Snell's Law
   11.3  Total Internal Reflection
   11.4  Schlick Approximation
   11.5  Modeling a Hollow Glass Sphere
   12  Positionable Camera
   12.1  Camera Viewing Geometry
   12.2  Positioning and Orienting the Camera
   13  Defocus Blur
   13.1  A Thin Lens Approximation
   13.2  Generating Sample Rays

   我花了许多时间来使用cpp实现一个rtow，花在理解该文所阐述的技术原理的时间要比编码的时间长得多。有很多概念我都需要经过推导才能确性它是可使用的，而且即使现在已经完成了final scene，却仍然部分内容有所存疑，比如Defocus Blur。

   这正是用rust重写一遍，review并记录笔记的好时机！

   但是，我需要降低这一事件的优先级，因为我需要首先完整的读完这个系列的三本书藉。我希望能整对整个RT过程有一个清晰直观的解决方案后，再来逐步解决过程中的困惑。
** rtnw
   book: https://raytracing.github.io/books/RayTracingTheNextWeek.html#overview
